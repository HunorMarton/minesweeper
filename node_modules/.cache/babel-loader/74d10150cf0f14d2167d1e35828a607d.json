{"remainingRequest":"/Users/hunor/projects/minesweeper/node_modules/thread-loader/dist/cjs.js!/Users/hunor/projects/minesweeper/node_modules/babel-loader/lib/index.js!/Users/hunor/projects/minesweeper/node_modules/eslint-loader/index.js??ref--13-0!/Users/hunor/projects/minesweeper/src/utils.js","dependencies":[{"path":"/Users/hunor/projects/minesweeper/src/utils.js","mtime":1598293695569},{"path":"/Users/hunor/projects/minesweeper/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hunor/projects/minesweeper/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hunor/projects/minesweeper/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hunor/projects/minesweeper/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvciI7CmV4cG9ydCB2YXIgZ2V0SW5kZXggPSBmdW5jdGlvbiBnZXRJbmRleChyb3csIGNvbHVtbiwgY29uZmlnKSB7CiAgLy8gU2ltcGx5IHJldHVybiBpZiBjb29yZGluYXRlcyBhcmUgb3V0IG9mIGZpZWxkCiAgaWYgKHJvdyA8IDApIHJldHVybjsKICBpZiAoY29sdW1uIDwgMCkgcmV0dXJuOwogIGlmIChyb3cgPj0gY29uZmlnLmhlaWdodCkgcmV0dXJuOwogIGlmIChjb2x1bW4gPj0gY29uZmlnLndpZHRoKSByZXR1cm47IC8vIFJldHVybiBpbmRleAoKICByZXR1cm4gcm93ICogY29uZmlnLndpZHRoICsgY29sdW1uOwp9OwpleHBvcnQgdmFyIGdldENvb3JkaW5hdGVzID0gZnVuY3Rpb24gZ2V0Q29vcmRpbmF0ZXMoaW5kZXgsIGNvbmZpZykgewogIHJldHVybiB7CiAgICByb3c6IE1hdGguZmxvb3IoaW5kZXggLyBjb25maWcud2lkdGgpLAogICAgY29sdW1uOiBpbmRleCAlIGNvbmZpZy53aWR0aAogIH07Cn07CmV4cG9ydCB2YXIgZ2VuZXJhdGVUaWxlcyA9IGZ1bmN0aW9uIGdlbmVyYXRlVGlsZXMoY29uZmlnKSB7CiAgLy8gR2VuZXJhdGUgYW4gZW1wdHkgYXJyYXkgd2l0aCB0aGUgYXBwcm9wcmlhdGUgbGVuZ3RoCiAgdmFyIGJvbWJzID0gQXJyYXkuZnJvbSh7CiAgICBsZW5ndGg6IGNvbmZpZy53aWR0aCAqIGNvbmZpZy5oZWlnaHQKICB9KTsgLy8gSW5qZWN0IGJvbWJzIHRvIHJhbmRvbSBwb3NpdGlvbnMKCiAgdmFyIGJvbWJzUGxhbnRlZCA9IDA7CgogIHdoaWxlIChib21ic1BsYW50ZWQgIT0gY29uZmlnLnRvdGFsTnVtYmVyT2ZCb21icykgewogICAgLy8gUGljayBhIHJhbmRvbSBpbmRleCB3aXRoaW4gdGhlIGFycmF5CiAgICB2YXIgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb25maWcud2lkdGggKiBjb25maWcuaGVpZ2h0KTsgLy8gSWYgdGlsZSBkb2Vzbid0IGFscmVhZHkgY29udGFpbiBhIGJvbWIgdGhlbiBwbGFudCBpdAoKICAgIGlmICghYm9tYnNbaW5kZXhdKSB7CiAgICAgIGJvbWJzW2luZGV4XSA9IHRydWU7CiAgICAgIGJvbWJzUGxhbnRlZCsrOwogICAgfQogIH0KCiAgcmV0dXJuIGJvbWJzLm1hcChmdW5jdGlvbiAoYm9tYiwgaSwgYXJyYXkpIHsKICAgIHZhciBfZ2V0Q29vcmRpbmF0ZXMgPSBnZXRDb29yZGluYXRlcyhpLCBjb25maWcpLAogICAgICAgIHJvdyA9IF9nZXRDb29yZGluYXRlcy5yb3csCiAgICAgICAgY29sdW1uID0gX2dldENvb3JkaW5hdGVzLmNvbHVtbjsgLy8gQ291bnQgbnVtYmVyIG9mIGJvbWJzIGluIHRoZSBzdXJyb2luZGluZyB0aWxlcwoKCiAgICB2YXIgc3Vycm91bmRpbmdCb21icyA9IDA7CiAgICBpZiAoYXJyYXlbZ2V0SW5kZXgocm93IC0gMSwgY29sdW1uIC0gMSwgY29uZmlnKV0pIHN1cnJvdW5kaW5nQm9tYnMrKzsKICAgIGlmIChhcnJheVtnZXRJbmRleChyb3cgLSAxLCBjb2x1bW4gLSAwLCBjb25maWcpXSkgc3Vycm91bmRpbmdCb21icysrOwogICAgaWYgKGFycmF5W2dldEluZGV4KHJvdyAtIDEsIGNvbHVtbiArIDEsIGNvbmZpZyldKSBzdXJyb3VuZGluZ0JvbWJzKys7CiAgICBpZiAoYXJyYXlbZ2V0SW5kZXgocm93IC0gMCwgY29sdW1uIC0gMSwgY29uZmlnKV0pIHN1cnJvdW5kaW5nQm9tYnMrKzsKICAgIGlmIChhcnJheVtnZXRJbmRleChyb3cgLSAwLCBjb2x1bW4gKyAxLCBjb25maWcpXSkgc3Vycm91bmRpbmdCb21icysrOwogICAgaWYgKGFycmF5W2dldEluZGV4KHJvdyArIDEsIGNvbHVtbiAtIDEsIGNvbmZpZyldKSBzdXJyb3VuZGluZ0JvbWJzKys7CiAgICBpZiAoYXJyYXlbZ2V0SW5kZXgocm93ICsgMSwgY29sdW1uIC0gMCwgY29uZmlnKV0pIHN1cnJvdW5kaW5nQm9tYnMrKzsKICAgIGlmIChhcnJheVtnZXRJbmRleChyb3cgKyAxLCBjb2x1bW4gKyAxLCBjb25maWcpXSkgc3Vycm91bmRpbmdCb21icysrOwogICAgcmV0dXJuIHsKICAgICAgYm9tYjogYm9tYiwKICAgICAgLy8gVGhlIHRpbGUgY29udGFpbnMgYSBib21iCiAgICAgIGZsYWdnZWQ6IGZhbHNlLAogICAgICAvLyBUaGUgdGlsZSBpcyBmbGFnZ2VkCiAgICAgIHJldmVhbGVkOiBmYWxzZSwKICAgICAgLy8gVGhlIHRpbGUgaGFzIGJlZW4gcmV2ZWFsZWQKICAgICAgc3Vycm91bmRpbmdCb21iczogc3Vycm91bmRpbmdCb21icyAvLyBUaGUgbnVtYmVyIG9mIGJvbWJzIGluIHRoZSBzdXJyb3VuZGluZyBmaWVsZHMKCiAgICB9OwogIH0pOwp9Ow=="},{"version":3,"sources":["/Users/hunor/projects/minesweeper/src/utils.js"],"names":["getIndex","row","column","config","height","width","getCoordinates","index","Math","floor","generateTiles","bombs","Array","from","length","bombsPlanted","totalNumberOfBombs","random","map","bomb","i","array","surroundingBombs","flagged","revealed"],"mappings":"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","sourcesContent":["export const getIndex = (row, column, config) => {\n  // Simply return if coordinates are out of field\n  if (row < 0) return;\n  if (column < 0) return;\n  if (row >= config.height) return;\n  if (column >= config.width) return;\n\n  // Return index\n  return row * config.width + column;\n};\n\nexport const getCoordinates = (index, config) => ({\n  row: Math.floor(index / config.width),\n  column: index % config.width,\n});\n\nexport const generateTiles = (config) => {\n  // Generate an empty array with the appropriate length\n  const bombs = Array.from({ length: config.width * config.height });\n\n  // Inject bombs to random positions\n  let bombsPlanted = 0;\n  while (bombsPlanted != config.totalNumberOfBombs) {\n    // Pick a random index within the array\n    const index = Math.floor(Math.random() * config.width * config.height);\n\n    // If tile doesn't already contain a bomb then plant it\n    if (!bombs[index]) {\n      bombs[index] = true;\n      bombsPlanted++;\n    }\n  }\n\n  return bombs.map((bomb, i, array) => {\n    const { row, column } = getCoordinates(i, config);\n\n    // Count number of bombs in the surroinding tiles\n    let surroundingBombs = 0;\n    if (array[getIndex(row - 1, column - 1, config)]) surroundingBombs++;\n    if (array[getIndex(row - 1, column - 0, config)]) surroundingBombs++;\n    if (array[getIndex(row - 1, column + 1, config)]) surroundingBombs++;\n    if (array[getIndex(row - 0, column - 1, config)]) surroundingBombs++;\n    if (array[getIndex(row - 0, column + 1, config)]) surroundingBombs++;\n    if (array[getIndex(row + 1, column - 1, config)]) surroundingBombs++;\n    if (array[getIndex(row + 1, column - 0, config)]) surroundingBombs++;\n    if (array[getIndex(row + 1, column + 1, config)]) surroundingBombs++;\n\n    return {\n      bomb, // The tile contains a bomb\n      flagged: false, // The tile is flagged\n      revealed: false, // The tile has been revealed\n      surroundingBombs, // The number of bombs in the surrounding fields\n    };\n  });\n};\n"]}]}